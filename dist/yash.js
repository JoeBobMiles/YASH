!function(t){var o={};function e(i){if(o[i])return o[i].exports;var r=o[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=o,e.d=function(t,o,i){e.o(t,o)||Object.defineProperty(t,o,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,o){if(1&o&&(t=e(t)),8&o)return t;if(4&o&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&o&&"string"!=typeof t)for(var r in t)e.d(i,r,function(o){return t[o]}.bind(null,r));return i},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},e.p="",e(e.s=0)}([function(t,o){var e;!function(t){t.ABSOLUTE=!1,t.RELATIVE=!0;var o=function(){function t(t,o){void 0===t&&(t=""),void 0===o&&(o=[]),this.selector="",this.elements=[],this.selector=t,this.elements=o}return t.prototype.add=function(t){return this.elements.push(t),this},t.prototype.render=function(){var t=document.querySelectorAll(this.selector)[0];this.elements.forEach((function(o){return t.appendChild(o.toXML())}))},t}();t.SVG=o;var e=function(){function o(o,e){void 0===o&&(o=""),void 0===e&&(e=t.ABSOLUTE),this.pathString="",this.relative=t.ABSOLUTE,this.fillColor="black",this.strokeColor="none",this.strokeWidth=1,this.pathString=o,this.relative=e}return o.prototype.toXML=function(){var t=document.createElementNS("http://www.w3.org/2000/svg","path");return t.setAttribute("d",this.pathString),t.setAttribute("fill",this.fillColor),t.setAttribute("stroke",this.strokeColor),t.setAttribute("stroke-width",this.strokeWidth.toString()),t},o.prototype.addCommand=function(t,o,e){e||(t=t.toUpperCase()),this.pathString+=null!=o?t+" "+o+" ":t},o.prototype.moveTo=function(t,o,e){return void 0===e&&(e=this.relative),this.addCommand("m",t+","+o,e),this},o.prototype.m=function(o,e){return this.moveTo(o,e,t.RELATIVE)},o.prototype.M=function(o,e){return this.moveTo(o,e,t.ABSOLUTE)},o.prototype.lineTo=function(t,o,e){return void 0===e&&(e=this.relative),this.addCommand("l",t+","+o,e),this},o.prototype.l=function(o,e){return this.lineTo(o,e,t.RELATIVE)},o.prototype.L=function(o,e){return this.lineTo(o,e,t.ABSOLUTE)},o.prototype.curveTo=function(t,o,e,i,r,n,s){return void 0===s&&(s=this.relative),this.addCommand("c",t+","+o+" "+e+","+i+" "+r+","+n,s),this},o.prototype.c=function(o,e,i,r,n,s){return this.curveTo(o,e,i,r,n,s,t.RELATIVE)},o.prototype.C=function(o,e,i,r,n,s){return this.curveTo(o,e,i,r,n,s,t.ABSOLUTE)},o.prototype.quadCurveTo=function(t,o,e,i,r){return void 0===r&&(r=this.relative),this.addCommand("q",t+","+o+" "+e+","+i,r),this},o.prototype.q=function(o,e,i,r){return this.quadCurveTo(o,e,i,r,t.RELATIVE)},o.prototype.Q=function(o,e,i,r){return this.quadCurveTo(o,e,i,r,t.ABSOLUTE)},o.prototype.cubicCurveTo=function(t,o,e){return void 0===e&&(e=this.relative),this.addCommand("t",t+","+o,e),this},o.prototype.t=function(o,e){return this.cubicCurveTo(o,e,t.RELATIVE)},o.prototype.T=function(o,e){return this.cubicCurveTo(o,e,t.ABSOLUTE)},o.prototype.close=function(){return this.addCommand("Z",null,!1),this},o.prototype.Z=function(){return this.close()},o.prototype.fill=function(t){return this.fillColor=t,this},o.prototype.stroke=function(t,o){return void 0===o&&(o=this.strokeWidth),this.strokeColor=t,this.strokeWidth=o,this},o.prototype.setStrokeWidth=function(t){return this.strokeWidth=t,this},o}();t.Path=e;var i=function(){this.family=[],this.color="",this.size="",this.weight="normal"},r=function(){function t(t,o,e,r){void 0===r&&(r=null),this.body="",this.x=0,this.y=0,this.textAnchor="",this.font=new i,this.body=t,this.x=o,this.y=e,this.font.family=r}return t.prototype.toXML=function(){var t=document.createElementNS("http://www.w3.org/2000/svg","text");return t.innerHTML=this.body,t.setAttribute("x",this.x.toString()),t.setAttribute("y",this.y.toString()),this.font.family&&t.setAttribute("font-family",this.font.family.join(",")),t.setAttribute("font-size",this.font.size),t.setAttribute("fill",this.font.color),t.setAttribute("font-weight",this.font.weight),t.setAttribute("text-anchor",this.textAnchor),t},t.prototype.setBody=function(t){return this.body=t,this},t.prototype.position=function(t,o){return this.x=t,this.y=o,this},t.prototype.fonts=function(t){return this.font.family=t,this},t.prototype.color=function(t){return this.font.color=t,this},t.prototype.size=function(t){return this.font.size="number"==typeof t?t.toString():t,this},t.prototype.weight=function(t){return this.font.weight="number"==typeof t?t.toString():t,this},t.prototype.anchor=function(t){return this.textAnchor=t,this},t}();t.Text=r}(e||(e={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(t){var e={};function o(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(r,i,function(e){return t[e]}.bind(null,i));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";function r(t){for(var o in t)e.hasOwnProperty(o)||(e[o]=t[o])}e.__esModule=!0,r(o(1)),r(o(2)),r(o(3))},function(t,e,o){"use strict";e.__esModule=!0,e.ABSOLUTE=!1,e.RELATIVE=!0;var r=function(){function t(t,o){void 0===t&&(t=""),void 0===o&&(o=e.ABSOLUTE),this.pathString="",this.relative=e.ABSOLUTE,this.fillColor="black",this.strokeColor="none",this.strokeWidth=1,this.pathString=t,this.relative=o}return t.prototype.toXML=function(){var t=document.createElementNS("http://www.w3.org/2000/svg","path");return t.setAttribute("d",this.pathString),t.setAttribute("fill",this.fillColor),t.setAttribute("stroke",this.strokeColor),t.setAttribute("stroke-width",this.strokeWidth.toString()),t},t.prototype.moveTo=function(t,e,o){return void 0===o&&(o=this.relative),this.addCommand("m",t+","+e,o),this},t.prototype.m=function(t,o){return this.moveTo(t,o,e.RELATIVE)},t.prototype.M=function(t,o){return this.moveTo(t,o,e.ABSOLUTE)},t.prototype.lineTo=function(t,e,o){return void 0===o&&(o=this.relative),this.addCommand("l",t+","+e,o),this},t.prototype.l=function(t,o){return this.lineTo(t,o,e.RELATIVE)},t.prototype.L=function(t,o){return this.lineTo(t,o,e.ABSOLUTE)},t.prototype.curveTo=function(t,e,o,r,i,n,s){return void 0===s&&(s=this.relative),this.addCommand("c",t+","+e+" "+o+","+r+" "+i+","+n,s),this},t.prototype.c=function(t,o,r,i,n,s){return this.curveTo(t,o,r,i,n,s,e.RELATIVE)},t.prototype.C=function(t,o,r,i,n,s){return this.curveTo(t,o,r,i,n,s,e.ABSOLUTE)},t.prototype.quadCurveTo=function(t,e,o,r,i){return void 0===i&&(i=this.relative),this.addCommand("q",t+","+e+" "+o+","+r,i),this},t.prototype.q=function(t,o,r,i){return this.quadCurveTo(t,o,r,i,e.RELATIVE)},t.prototype.Q=function(t,o,r,i){return this.quadCurveTo(t,o,r,i,e.ABSOLUTE)},t.prototype.cubicCurveTo=function(t,e,o){return void 0===o&&(o=this.relative),this.addCommand("t",t+","+e,o),this},t.prototype.t=function(t,o){return this.cubicCurveTo(t,o,e.RELATIVE)},t.prototype.T=function(t,o){return this.cubicCurveTo(t,o,e.ABSOLUTE)},t.prototype.close=function(){return this.addCommand("Z",null,!1),this},t.prototype.Z=function(){return this.close()},t.prototype.setFill=function(t){return this.fillColor=t,this},t.prototype.setStroke=function(t,e){return void 0===e&&(e=this.strokeWidth),this.strokeColor=t,this.strokeWidth=e,this},t.prototype.setStrokeWidth=function(t){return this.strokeWidth=t,this},t.prototype.addCommand=function(t,e,o){o||(t=t.toUpperCase()),this.pathString+=null!=e?t+" "+e+" ":t},t}();e.Path=r},function(t,e,o){"use strict";e.__esModule=!0;var r=function(){function t(t,e){void 0===t&&(t=""),void 0===e&&(e=[]),this.selector="",this.elements=[],this.selector=t,this.elements=e}return t.prototype.add=function(t){return this.elements.push(t),this},t.prototype.render=function(){var t=document.querySelectorAll(this.selector)[0];this.elements.forEach((function(e){return t.appendChild(e.toXML())}))},t}();e.SVG=r},function(t,e,o){"use strict";e.__esModule=!0;var r=o(4),i=function(){function t(t,e,o,i){void 0===i&&(i=null),this.body="",this.x=0,this.y=0,this.textAnchor="",this.fontProperties=new r.TextFontProperties,this.body=t,this.x=e,this.y=o,this.fontProperties.family=i}return t.prototype.toXML=function(){var t=document.createElementNS("http://www.w3.org/2000/svg","text");return t.innerHTML=this.body,t.setAttribute("x",this.x.toString()),t.setAttribute("y",this.y.toString()),this.fontProperties.family&&t.setAttribute("font-family",this.fontProperties.family.join(",")),t.setAttribute("font-size",this.fontProperties.size),t.setAttribute("fill",this.fontProperties.color),t.setAttribute("font-weight",this.fontProperties.weight),t.setAttribute("text-anchor",this.textAnchor),t},t.prototype.setBody=function(t){return this.body=t,this},t.prototype.setPosition=function(t,e){return this.x=t,this.y=e,this},t.prototype.setFonts=function(t){return this.fontProperties.family=t,this},t.prototype.setColor=function(t){return this.fontProperties.color=t,this},t.prototype.setSize=function(t){return this.fontProperties.size="number"==typeof t?t.toString():t,this},t.prototype.setWeight=function(t){return this.fontProperties.weight="number"==typeof t?t.toString():t,this},t.prototype.setAnchor=function(t){return this.textAnchor=t,this},t}();e.Text=i},function(t,e,o){"use strict";e.__esModule=!0;var r=function(){this.family=[],this.color="",this.size="",this.weight="normal"};e.TextFontProperties=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,